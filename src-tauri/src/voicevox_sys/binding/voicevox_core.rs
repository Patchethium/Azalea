/* automatically generated by rust-bindgen 0.70.1 */

pub const __bool_true_false_are_defined: u32 = 1;
pub const true_: u32 = 1;
pub const false_: u32 = 0;
pub const _STDINT_H: u32 = 1;
pub const _FEATURES_H: u32 = 1;
pub const _DEFAULT_SOURCE: u32 = 1;
pub const __GLIBC_USE_ISOC23: u32 = 0;
pub const __USE_ISOC11: u32 = 1;
pub const __USE_ISOC99: u32 = 1;
pub const __USE_ISOC95: u32 = 1;
pub const __USE_POSIX_IMPLICITLY: u32 = 1;
pub const _POSIX_SOURCE: u32 = 1;
pub const _POSIX_C_SOURCE: u32 = 200809;
pub const __USE_POSIX: u32 = 1;
pub const __USE_POSIX2: u32 = 1;
pub const __USE_POSIX199309: u32 = 1;
pub const __USE_POSIX199506: u32 = 1;
pub const __USE_XOPEN2K: u32 = 1;
pub const __USE_XOPEN2K8: u32 = 1;
pub const _ATFILE_SOURCE: u32 = 1;
pub const __WORDSIZE: u32 = 64;
pub const __WORDSIZE_TIME64_COMPAT32: u32 = 1;
pub const __SYSCALL_WORDSIZE: u32 = 64;
pub const __TIMESIZE: u32 = 64;
pub const __USE_TIME_BITS64: u32 = 1;
pub const __USE_MISC: u32 = 1;
pub const __USE_ATFILE: u32 = 1;
pub const __USE_FORTIFY_LEVEL: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_GETS: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_SCANF: u32 = 0;
pub const __GLIBC_USE_C23_STRTOL: u32 = 0;
pub const _STDC_PREDEF_H: u32 = 1;
pub const __STDC_IEC_559__: u32 = 1;
pub const __STDC_IEC_60559_BFP__: u32 = 201404;
pub const __STDC_IEC_559_COMPLEX__: u32 = 1;
pub const __STDC_IEC_60559_COMPLEX__: u32 = 201404;
pub const __STDC_ISO_10646__: u32 = 201706;
pub const __GNU_LIBRARY__: u32 = 6;
pub const __GLIBC__: u32 = 2;
pub const __GLIBC_MINOR__: u32 = 40;
pub const _SYS_CDEFS_H: u32 = 1;
pub const __glibc_c99_flexarr_available: u32 = 1;
pub const __LDOUBLE_REDIRECTS_TO_FLOAT128_ABI: u32 = 0;
pub const __HAVE_GENERIC_SELECTION: u32 = 1;
pub const __GLIBC_USE_LIB_EXT2: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT_C23: u32 = 0;
pub const __GLIBC_USE_IEC_60559_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT_C23: u32 = 0;
pub const __GLIBC_USE_IEC_60559_TYPES_EXT: u32 = 0;
pub const _BITS_TYPES_H: u32 = 1;
pub const _BITS_TYPESIZES_H: u32 = 1;
pub const __OFF_T_MATCHES_OFF64_T: u32 = 1;
pub const __INO_T_MATCHES_INO64_T: u32 = 1;
pub const __RLIM_T_MATCHES_RLIM64_T: u32 = 1;
pub const __STATFS_MATCHES_STATFS64: u32 = 1;
pub const __KERNEL_OLD_TIMEVAL_MATCHES_TIMEVAL64: u32 = 1;
pub const __FD_SETSIZE: u32 = 1024;
pub const _BITS_TIME64_H: u32 = 1;
pub const _BITS_WCHAR_H: u32 = 1;
pub const _BITS_STDINT_INTN_H: u32 = 1;
pub const _BITS_STDINT_UINTN_H: u32 = 1;
pub const _BITS_STDINT_LEAST_H: u32 = 1;
pub const INT8_MIN: i32 = -128;
pub const INT16_MIN: i32 = -32768;
pub const INT32_MIN: i32 = -2147483648;
pub const INT8_MAX: u32 = 127;
pub const INT16_MAX: u32 = 32767;
pub const INT32_MAX: u32 = 2147483647;
pub const UINT8_MAX: u32 = 255;
pub const UINT16_MAX: u32 = 65535;
pub const UINT32_MAX: u32 = 4294967295;
pub const INT_LEAST8_MIN: i32 = -128;
pub const INT_LEAST16_MIN: i32 = -32768;
pub const INT_LEAST32_MIN: i32 = -2147483648;
pub const INT_LEAST8_MAX: u32 = 127;
pub const INT_LEAST16_MAX: u32 = 32767;
pub const INT_LEAST32_MAX: u32 = 2147483647;
pub const UINT_LEAST8_MAX: u32 = 255;
pub const UINT_LEAST16_MAX: u32 = 65535;
pub const UINT_LEAST32_MAX: u32 = 4294967295;
pub const INT_FAST8_MIN: i32 = -128;
pub const INT_FAST16_MIN: i64 = -9223372036854775808;
pub const INT_FAST32_MIN: i64 = -9223372036854775808;
pub const INT_FAST8_MAX: u32 = 127;
pub const INT_FAST16_MAX: u64 = 9223372036854775807;
pub const INT_FAST32_MAX: u64 = 9223372036854775807;
pub const UINT_FAST8_MAX: u32 = 255;
pub const UINT_FAST16_MAX: i32 = -1;
pub const UINT_FAST32_MAX: i32 = -1;
pub const INTPTR_MIN: i64 = -9223372036854775808;
pub const INTPTR_MAX: u64 = 9223372036854775807;
pub const UINTPTR_MAX: i32 = -1;
pub const PTRDIFF_MIN: i64 = -9223372036854775808;
pub const PTRDIFF_MAX: u64 = 9223372036854775807;
pub const SIG_ATOMIC_MIN: i32 = -2147483648;
pub const SIG_ATOMIC_MAX: u32 = 2147483647;
pub const SIZE_MAX: i32 = -1;
pub const WINT_MIN: u32 = 0;
pub const WINT_MAX: u32 = 4294967295;
pub type __u_char = ::std::os::raw::c_uchar;
pub type __u_short = ::std::os::raw::c_ushort;
pub type __u_int = ::std::os::raw::c_uint;
pub type __u_long = ::std::os::raw::c_ulong;
pub type __int8_t = ::std::os::raw::c_schar;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __int16_t = ::std::os::raw::c_short;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_long;
pub type __uint64_t = ::std::os::raw::c_ulong;
pub type __int_least8_t = __int8_t;
pub type __uint_least8_t = __uint8_t;
pub type __int_least16_t = __int16_t;
pub type __uint_least16_t = __uint16_t;
pub type __int_least32_t = __int32_t;
pub type __uint_least32_t = __uint32_t;
pub type __int_least64_t = __int64_t;
pub type __uint_least64_t = __uint64_t;
pub type __quad_t = ::std::os::raw::c_long;
pub type __u_quad_t = ::std::os::raw::c_ulong;
pub type __intmax_t = ::std::os::raw::c_long;
pub type __uintmax_t = ::std::os::raw::c_ulong;
pub type __dev_t = ::std::os::raw::c_ulong;
pub type __uid_t = ::std::os::raw::c_uint;
pub type __gid_t = ::std::os::raw::c_uint;
pub type __ino_t = ::std::os::raw::c_ulong;
pub type __ino64_t = ::std::os::raw::c_ulong;
pub type __mode_t = ::std::os::raw::c_uint;
pub type __nlink_t = ::std::os::raw::c_ulong;
pub type __off_t = ::std::os::raw::c_long;
pub type __off64_t = ::std::os::raw::c_long;
pub type __pid_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __fsid_t {
  pub __val: [::std::os::raw::c_int; 2usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
  ["Size of __fsid_t"][::std::mem::size_of::<__fsid_t>() - 8usize];
  ["Alignment of __fsid_t"][::std::mem::align_of::<__fsid_t>() - 4usize];
  ["Offset of field: __fsid_t::__val"][::std::mem::offset_of!(__fsid_t, __val) - 0usize];
};
pub type __clock_t = ::std::os::raw::c_long;
pub type __rlim_t = ::std::os::raw::c_ulong;
pub type __rlim64_t = ::std::os::raw::c_ulong;
pub type __id_t = ::std::os::raw::c_uint;
pub type __time_t = ::std::os::raw::c_long;
pub type __useconds_t = ::std::os::raw::c_uint;
pub type __suseconds_t = ::std::os::raw::c_long;
pub type __suseconds64_t = ::std::os::raw::c_long;
pub type __daddr_t = ::std::os::raw::c_int;
pub type __key_t = ::std::os::raw::c_int;
pub type __clockid_t = ::std::os::raw::c_int;
pub type __timer_t = *mut ::std::os::raw::c_void;
pub type __blksize_t = ::std::os::raw::c_long;
pub type __blkcnt_t = ::std::os::raw::c_long;
pub type __blkcnt64_t = ::std::os::raw::c_long;
pub type __fsblkcnt_t = ::std::os::raw::c_ulong;
pub type __fsblkcnt64_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt64_t = ::std::os::raw::c_ulong;
pub type __fsword_t = ::std::os::raw::c_long;
pub type __ssize_t = ::std::os::raw::c_long;
pub type __syscall_slong_t = ::std::os::raw::c_long;
pub type __syscall_ulong_t = ::std::os::raw::c_ulong;
pub type __loff_t = __off64_t;
pub type __caddr_t = *mut ::std::os::raw::c_char;
pub type __intptr_t = ::std::os::raw::c_long;
pub type __socklen_t = ::std::os::raw::c_uint;
pub type __sig_atomic_t = ::std::os::raw::c_int;
pub type int_least8_t = __int_least8_t;
pub type int_least16_t = __int_least16_t;
pub type int_least32_t = __int_least32_t;
pub type int_least64_t = __int_least64_t;
pub type uint_least8_t = __uint_least8_t;
pub type uint_least16_t = __uint_least16_t;
pub type uint_least32_t = __uint_least32_t;
pub type uint_least64_t = __uint_least64_t;
pub type int_fast8_t = ::std::os::raw::c_schar;
pub type int_fast16_t = ::std::os::raw::c_long;
pub type int_fast32_t = ::std::os::raw::c_long;
pub type int_fast64_t = ::std::os::raw::c_long;
pub type uint_fast8_t = ::std::os::raw::c_uchar;
pub type uint_fast16_t = ::std::os::raw::c_ulong;
pub type uint_fast32_t = ::std::os::raw::c_ulong;
pub type uint_fast64_t = ::std::os::raw::c_ulong;
pub type intmax_t = __intmax_t;
pub type uintmax_t = __uintmax_t;
#[doc = " 実行環境に合った適切なハードウェアアクセラレーションモードを選択する"]
pub const VoicevoxAccelerationMode_VOICEVOX_ACCELERATION_MODE_AUTO: VoicevoxAccelerationMode = 0;
#[doc = " ハードウェアアクセラレーションモードを\"CPU\"に設定する"]
pub const VoicevoxAccelerationMode_VOICEVOX_ACCELERATION_MODE_CPU: VoicevoxAccelerationMode = 1;
#[doc = " ハードウェアアクセラレーションモードを\"GPU\"に設定する"]
pub const VoicevoxAccelerationMode_VOICEVOX_ACCELERATION_MODE_GPU: VoicevoxAccelerationMode = 2;
pub type VoicevoxAccelerationMode = i32;
#[doc = " 成功"]
pub const VoicevoxResultCode_VOICEVOX_RESULT_OK: VoicevoxResultCode = 0;
#[doc = " open_jtalk辞書ファイルが読み込まれていない"]
pub const VoicevoxResultCode_VOICEVOX_RESULT_NOT_LOADED_OPENJTALK_DICT_ERROR: VoicevoxResultCode =
  1;
#[doc = " modelの読み込みに失敗した"]
pub const VoicevoxResultCode_VOICEVOX_RESULT_LOAD_MODEL_ERROR: VoicevoxResultCode = 2;
#[doc = " サポートされているデバイス情報取得に失敗した"]
pub const VoicevoxResultCode_VOICEVOX_RESULT_GET_SUPPORTED_DEVICES_ERROR: VoicevoxResultCode = 3;
#[doc = " GPUモードがサポートされていない"]
pub const VoicevoxResultCode_VOICEVOX_RESULT_GPU_SUPPORT_ERROR: VoicevoxResultCode = 4;
#[doc = " メタ情報読み込みに失敗した"]
pub const VoicevoxResultCode_VOICEVOX_RESULT_LOAD_METAS_ERROR: VoicevoxResultCode = 5;
#[doc = " ステータスが初期化されていない"]
pub const VoicevoxResultCode_VOICEVOX_RESULT_UNINITIALIZED_STATUS_ERROR: VoicevoxResultCode = 6;
#[doc = " 無効なspeaker_idが指定された"]
pub const VoicevoxResultCode_VOICEVOX_RESULT_INVALID_SPEAKER_ID_ERROR: VoicevoxResultCode = 7;
#[doc = " 無効なmodel_indexが指定された"]
pub const VoicevoxResultCode_VOICEVOX_RESULT_INVALID_MODEL_INDEX_ERROR: VoicevoxResultCode = 8;
#[doc = " 対応していないmodelが指定された"]
pub const VoicevoxResultCode_VOICEVOX_RESULT_UNSUPPORTED_MODEL_ERROR: VoicevoxResultCode = 15;
#[doc = " 推論に失敗した"]
pub const VoicevoxResultCode_VOICEVOX_RESULT_INFERENCE_ERROR: VoicevoxResultCode = 9;
#[doc = " コンテキストラベル出力に失敗した"]
pub const VoicevoxResultCode_VOICEVOX_RESULT_EXTRACT_FULL_CONTEXT_LABEL_ERROR: VoicevoxResultCode =
  10;
#[doc = " 無効なutf8文字列が入力された"]
pub const VoicevoxResultCode_VOICEVOX_RESULT_INVALID_UTF8_INPUT_ERROR: VoicevoxResultCode = 11;
#[doc = " aquestalk形式のテキストの解析に失敗した"]
pub const VoicevoxResultCode_VOICEVOX_RESULT_PARSE_KANA_ERROR: VoicevoxResultCode = 12;
#[doc = " 無効なAudioQuery"]
pub const VoicevoxResultCode_VOICEVOX_RESULT_INVALID_AUDIO_QUERY_ERROR: VoicevoxResultCode = 13;
pub type VoicevoxResultCode = i32;
#[doc = " 初期化オプション"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VoicevoxInitializeOptions {
  #[doc = " ハードウェアアクセラレーションモード"]
  pub acceleration_mode: VoicevoxAccelerationMode,
  #[doc = " CPU利用数を指定\n 0を指定すると環境に合わせたCPUが利用される"]
  pub cpu_num_threads: u16,
  #[doc = " 全てのモデルを読み込む"]
  pub load_all_models: bool,
  #[doc = " open_jtalkの辞書ディレクトリ"]
  pub open_jtalk_dict_dir: *const ::std::os::raw::c_char,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
  ["Size of VoicevoxInitializeOptions"]
    [::std::mem::size_of::<VoicevoxInitializeOptions>() - 16usize];
  ["Alignment of VoicevoxInitializeOptions"]
    [::std::mem::align_of::<VoicevoxInitializeOptions>() - 8usize];
  ["Offset of field: VoicevoxInitializeOptions::acceleration_mode"]
    [::std::mem::offset_of!(VoicevoxInitializeOptions, acceleration_mode) - 0usize];
  ["Offset of field: VoicevoxInitializeOptions::cpu_num_threads"]
    [::std::mem::offset_of!(VoicevoxInitializeOptions, cpu_num_threads) - 4usize];
  ["Offset of field: VoicevoxInitializeOptions::load_all_models"]
    [::std::mem::offset_of!(VoicevoxInitializeOptions, load_all_models) - 6usize];
  ["Offset of field: VoicevoxInitializeOptions::open_jtalk_dict_dir"]
    [::std::mem::offset_of!(VoicevoxInitializeOptions, open_jtalk_dict_dir) - 8usize];
};
#[doc = " Audio query のオプション"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VoicevoxAudioQueryOptions {
  #[doc = " aquestalk形式のkanaとしてテキストを解釈する"]
  pub kana: bool,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
  ["Size of VoicevoxAudioQueryOptions"]
    [::std::mem::size_of::<VoicevoxAudioQueryOptions>() - 1usize];
  ["Alignment of VoicevoxAudioQueryOptions"]
    [::std::mem::align_of::<VoicevoxAudioQueryOptions>() - 1usize];
  ["Offset of field: VoicevoxAudioQueryOptions::kana"]
    [::std::mem::offset_of!(VoicevoxAudioQueryOptions, kana) - 0usize];
};
#[doc = " `voicevox_synthesis` のオプション"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VoicevoxSynthesisOptions {
  #[doc = " 疑問文の調整を有効にする"]
  pub enable_interrogative_upspeak: bool,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
  ["Size of VoicevoxSynthesisOptions"][::std::mem::size_of::<VoicevoxSynthesisOptions>() - 1usize];
  ["Alignment of VoicevoxSynthesisOptions"]
    [::std::mem::align_of::<VoicevoxSynthesisOptions>() - 1usize];
  ["Offset of field: VoicevoxSynthesisOptions::enable_interrogative_upspeak"]
    [::std::mem::offset_of!(VoicevoxSynthesisOptions, enable_interrogative_upspeak) - 0usize];
};
#[doc = " テキスト音声合成オプション"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VoicevoxTtsOptions {
  #[doc = " aquestalk形式のkanaとしてテキストを解釈する"]
  pub kana: bool,
  #[doc = " 疑問文の調整を有効にする"]
  pub enable_interrogative_upspeak: bool,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
  ["Size of VoicevoxTtsOptions"][::std::mem::size_of::<VoicevoxTtsOptions>() - 2usize];
  ["Alignment of VoicevoxTtsOptions"][::std::mem::align_of::<VoicevoxTtsOptions>() - 1usize];
  ["Offset of field: VoicevoxTtsOptions::kana"]
    [::std::mem::offset_of!(VoicevoxTtsOptions, kana) - 0usize];
  ["Offset of field: VoicevoxTtsOptions::enable_interrogative_upspeak"]
    [::std::mem::offset_of!(VoicevoxTtsOptions, enable_interrogative_upspeak) - 1usize];
};
pub struct VoicevoxCore {
  __library: ::libloading::Library,
  pub voicevox_make_default_initialize_options:
    Result<unsafe extern "C" fn() -> VoicevoxInitializeOptions, ::libloading::Error>,
  pub voicevox_initialize: Result<
    unsafe extern "C" fn(options: VoicevoxInitializeOptions) -> VoicevoxResultCode,
    ::libloading::Error,
  >,
  pub voicevox_get_version:
    Result<unsafe extern "C" fn() -> *const ::std::os::raw::c_char, ::libloading::Error>,
  pub voicevox_load_model:
    Result<unsafe extern "C" fn(speaker_id: u32) -> VoicevoxResultCode, ::libloading::Error>,
  pub voicevox_is_gpu_mode: Result<unsafe extern "C" fn() -> bool, ::libloading::Error>,
  pub voicevox_is_model_loaded:
    Result<unsafe extern "C" fn(speaker_id: u32) -> bool, ::libloading::Error>,
  pub voicevox_finalize: Result<unsafe extern "C" fn(), ::libloading::Error>,
  pub voicevox_get_metas_json:
    Result<unsafe extern "C" fn() -> *const ::std::os::raw::c_char, ::libloading::Error>,
  pub voicevox_get_supported_devices_json:
    Result<unsafe extern "C" fn() -> *const ::std::os::raw::c_char, ::libloading::Error>,
  pub voicevox_predict_duration: Result<
    unsafe extern "C" fn(
      length: usize,
      phoneme_vector: *mut i64,
      speaker_id: u32,
      output_predict_duration_data_length: *mut usize,
      output_predict_duration_data: *mut *mut f32,
    ) -> VoicevoxResultCode,
    ::libloading::Error,
  >,
  pub voicevox_predict_duration_data_free:
    Result<unsafe extern "C" fn(predict_duration_data: *mut f32), ::libloading::Error>,
  pub voicevox_predict_intonation: Result<
    unsafe extern "C" fn(
      length: usize,
      vowel_phoneme_vector: *mut i64,
      consonant_phoneme_vector: *mut i64,
      start_accent_vector: *mut i64,
      end_accent_vector: *mut i64,
      start_accent_phrase_vector: *mut i64,
      end_accent_phrase_vector: *mut i64,
      speaker_id: u32,
      output_predict_intonation_data_length: *mut usize,
      output_predict_intonation_data: *mut *mut f32,
    ) -> VoicevoxResultCode,
    ::libloading::Error,
  >,
  pub voicevox_predict_intonation_data_free:
    Result<unsafe extern "C" fn(predict_intonation_data: *mut f32), ::libloading::Error>,
  pub voicevox_decode: Result<
    unsafe extern "C" fn(
      length: usize,
      phoneme_size: usize,
      f0: *mut f32,
      phoneme_vector: *mut f32,
      speaker_id: u32,
      output_decode_data_length: *mut usize,
      output_decode_data: *mut *mut f32,
    ) -> VoicevoxResultCode,
    ::libloading::Error,
  >,
  pub voicevox_decode_data_free:
    Result<unsafe extern "C" fn(decode_data: *mut f32), ::libloading::Error>,
  pub voicevox_make_default_audio_query_options:
    Result<unsafe extern "C" fn() -> VoicevoxAudioQueryOptions, ::libloading::Error>,
  pub voicevox_audio_query: Result<
    unsafe extern "C" fn(
      text: *const ::std::os::raw::c_char,
      speaker_id: u32,
      options: VoicevoxAudioQueryOptions,
      output_audio_query_json: *mut *mut ::std::os::raw::c_char,
    ) -> VoicevoxResultCode,
    ::libloading::Error,
  >,
  pub voicevox_make_default_synthesis_options:
    Result<unsafe extern "C" fn() -> VoicevoxSynthesisOptions, ::libloading::Error>,
  pub voicevox_synthesis: Result<
    unsafe extern "C" fn(
      audio_query_json: *const ::std::os::raw::c_char,
      speaker_id: u32,
      options: VoicevoxSynthesisOptions,
      output_wav_length: *mut usize,
      output_wav: *mut *mut u8,
    ) -> VoicevoxResultCode,
    ::libloading::Error,
  >,
  pub voicevox_make_default_tts_options:
    Result<unsafe extern "C" fn() -> VoicevoxTtsOptions, ::libloading::Error>,
  pub voicevox_tts: Result<
    unsafe extern "C" fn(
      text: *const ::std::os::raw::c_char,
      speaker_id: u32,
      options: VoicevoxTtsOptions,
      output_wav_length: *mut usize,
      output_wav: *mut *mut u8,
    ) -> VoicevoxResultCode,
    ::libloading::Error,
  >,
  pub voicevox_audio_query_json_free: Result<
    unsafe extern "C" fn(audio_query_json: *mut ::std::os::raw::c_char),
    ::libloading::Error,
  >,
  pub voicevox_wav_free: Result<unsafe extern "C" fn(wav: *mut u8), ::libloading::Error>,
  pub voicevox_error_result_to_message: Result<
    unsafe extern "C" fn(result_code: VoicevoxResultCode) -> *const ::std::os::raw::c_char,
    ::libloading::Error,
  >,
}
impl VoicevoxCore {
  pub unsafe fn new<P>(path: P) -> Result<Self, ::libloading::Error>
  where
    P: AsRef<::std::ffi::OsStr>,
  {
    let library = ::libloading::Library::new(path)?;
    Self::from_library(library)
  }
  pub unsafe fn from_library<L>(library: L) -> Result<Self, ::libloading::Error>
  where
    L: Into<::libloading::Library>,
  {
    let __library = library.into();
    let voicevox_make_default_initialize_options = __library
      .get(b"voicevox_make_default_initialize_options\0")
      .map(|sym| *sym);
    let voicevox_initialize = __library.get(b"voicevox_initialize\0").map(|sym| *sym);
    let voicevox_get_version = __library.get(b"voicevox_get_version\0").map(|sym| *sym);
    let voicevox_load_model = __library.get(b"voicevox_load_model\0").map(|sym| *sym);
    let voicevox_is_gpu_mode = __library.get(b"voicevox_is_gpu_mode\0").map(|sym| *sym);
    let voicevox_is_model_loaded = __library.get(b"voicevox_is_model_loaded\0").map(|sym| *sym);
    let voicevox_finalize = __library.get(b"voicevox_finalize\0").map(|sym| *sym);
    let voicevox_get_metas_json = __library.get(b"voicevox_get_metas_json\0").map(|sym| *sym);
    let voicevox_get_supported_devices_json = __library
      .get(b"voicevox_get_supported_devices_json\0")
      .map(|sym| *sym);
    let voicevox_predict_duration = __library
      .get(b"voicevox_predict_duration\0")
      .map(|sym| *sym);
    let voicevox_predict_duration_data_free = __library
      .get(b"voicevox_predict_duration_data_free\0")
      .map(|sym| *sym);
    let voicevox_predict_intonation = __library
      .get(b"voicevox_predict_intonation\0")
      .map(|sym| *sym);
    let voicevox_predict_intonation_data_free = __library
      .get(b"voicevox_predict_intonation_data_free\0")
      .map(|sym| *sym);
    let voicevox_decode = __library.get(b"voicevox_decode\0").map(|sym| *sym);
    let voicevox_decode_data_free = __library
      .get(b"voicevox_decode_data_free\0")
      .map(|sym| *sym);
    let voicevox_make_default_audio_query_options = __library
      .get(b"voicevox_make_default_audio_query_options\0")
      .map(|sym| *sym);
    let voicevox_audio_query = __library.get(b"voicevox_audio_query\0").map(|sym| *sym);
    let voicevox_make_default_synthesis_options = __library
      .get(b"voicevox_make_default_synthesis_options\0")
      .map(|sym| *sym);
    let voicevox_synthesis = __library.get(b"voicevox_synthesis\0").map(|sym| *sym);
    let voicevox_make_default_tts_options = __library
      .get(b"voicevox_make_default_tts_options\0")
      .map(|sym| *sym);
    let voicevox_tts = __library.get(b"voicevox_tts\0").map(|sym| *sym);
    let voicevox_audio_query_json_free = __library
      .get(b"voicevox_audio_query_json_free\0")
      .map(|sym| *sym);
    let voicevox_wav_free = __library.get(b"voicevox_wav_free\0").map(|sym| *sym);
    let voicevox_error_result_to_message = __library
      .get(b"voicevox_error_result_to_message\0")
      .map(|sym| *sym);
    Ok(VoicevoxCore {
      __library,
      voicevox_make_default_initialize_options,
      voicevox_initialize,
      voicevox_get_version,
      voicevox_load_model,
      voicevox_is_gpu_mode,
      voicevox_is_model_loaded,
      voicevox_finalize,
      voicevox_get_metas_json,
      voicevox_get_supported_devices_json,
      voicevox_predict_duration,
      voicevox_predict_duration_data_free,
      voicevox_predict_intonation,
      voicevox_predict_intonation_data_free,
      voicevox_decode,
      voicevox_decode_data_free,
      voicevox_make_default_audio_query_options,
      voicevox_audio_query,
      voicevox_make_default_synthesis_options,
      voicevox_synthesis,
      voicevox_make_default_tts_options,
      voicevox_tts,
      voicevox_audio_query_json_free,
      voicevox_wav_free,
      voicevox_error_result_to_message,
    })
  }
  pub unsafe fn voicevox_make_default_initialize_options(&self) -> VoicevoxInitializeOptions {
    (self
      .voicevox_make_default_initialize_options
      .as_ref()
      .expect("Expected function, got error."))()
  }
  pub unsafe fn voicevox_initialize(
    &self,
    options: VoicevoxInitializeOptions,
  ) -> VoicevoxResultCode {
    (self
      .voicevox_initialize
      .as_ref()
      .expect("Expected function, got error."))(options)
  }
  pub unsafe fn voicevox_get_version(&self) -> *const ::std::os::raw::c_char {
    (self
      .voicevox_get_version
      .as_ref()
      .expect("Expected function, got error."))()
  }
  pub unsafe fn voicevox_load_model(&self, speaker_id: u32) -> VoicevoxResultCode {
    (self
      .voicevox_load_model
      .as_ref()
      .expect("Expected function, got error."))(speaker_id)
  }
  pub unsafe fn voicevox_is_gpu_mode(&self) -> bool {
    (self
      .voicevox_is_gpu_mode
      .as_ref()
      .expect("Expected function, got error."))()
  }
  pub unsafe fn voicevox_is_model_loaded(&self, speaker_id: u32) -> bool {
    (self
      .voicevox_is_model_loaded
      .as_ref()
      .expect("Expected function, got error."))(speaker_id)
  }
  pub unsafe fn voicevox_finalize(&self) {
    (self
      .voicevox_finalize
      .as_ref()
      .expect("Expected function, got error."))()
  }
  pub unsafe fn voicevox_get_metas_json(&self) -> *const ::std::os::raw::c_char {
    (self
      .voicevox_get_metas_json
      .as_ref()
      .expect("Expected function, got error."))()
  }
  pub unsafe fn voicevox_get_supported_devices_json(&self) -> *const ::std::os::raw::c_char {
    (self
      .voicevox_get_supported_devices_json
      .as_ref()
      .expect("Expected function, got error."))()
  }
  pub unsafe fn voicevox_predict_duration(
    &self,
    length: usize,
    phoneme_vector: *mut i64,
    speaker_id: u32,
    output_predict_duration_data_length: *mut usize,
    output_predict_duration_data: *mut *mut f32,
  ) -> VoicevoxResultCode {
    (self
      .voicevox_predict_duration
      .as_ref()
      .expect("Expected function, got error."))(
      length,
      phoneme_vector,
      speaker_id,
      output_predict_duration_data_length,
      output_predict_duration_data,
    )
  }
  pub unsafe fn voicevox_predict_duration_data_free(&self, predict_duration_data: *mut f32) {
    (self
      .voicevox_predict_duration_data_free
      .as_ref()
      .expect("Expected function, got error."))(predict_duration_data)
  }
  pub unsafe fn voicevox_predict_intonation(
    &self,
    length: usize,
    vowel_phoneme_vector: *mut i64,
    consonant_phoneme_vector: *mut i64,
    start_accent_vector: *mut i64,
    end_accent_vector: *mut i64,
    start_accent_phrase_vector: *mut i64,
    end_accent_phrase_vector: *mut i64,
    speaker_id: u32,
    output_predict_intonation_data_length: *mut usize,
    output_predict_intonation_data: *mut *mut f32,
  ) -> VoicevoxResultCode {
    (self
      .voicevox_predict_intonation
      .as_ref()
      .expect("Expected function, got error."))(
      length,
      vowel_phoneme_vector,
      consonant_phoneme_vector,
      start_accent_vector,
      end_accent_vector,
      start_accent_phrase_vector,
      end_accent_phrase_vector,
      speaker_id,
      output_predict_intonation_data_length,
      output_predict_intonation_data,
    )
  }
  pub unsafe fn voicevox_predict_intonation_data_free(&self, predict_intonation_data: *mut f32) {
    (self
      .voicevox_predict_intonation_data_free
      .as_ref()
      .expect("Expected function, got error."))(predict_intonation_data)
  }
  pub unsafe fn voicevox_decode(
    &self,
    length: usize,
    phoneme_size: usize,
    f0: *mut f32,
    phoneme_vector: *mut f32,
    speaker_id: u32,
    output_decode_data_length: *mut usize,
    output_decode_data: *mut *mut f32,
  ) -> VoicevoxResultCode {
    (self
      .voicevox_decode
      .as_ref()
      .expect("Expected function, got error."))(
      length,
      phoneme_size,
      f0,
      phoneme_vector,
      speaker_id,
      output_decode_data_length,
      output_decode_data,
    )
  }
  pub unsafe fn voicevox_decode_data_free(&self, decode_data: *mut f32) {
    (self
      .voicevox_decode_data_free
      .as_ref()
      .expect("Expected function, got error."))(decode_data)
  }
  pub unsafe fn voicevox_make_default_audio_query_options(&self) -> VoicevoxAudioQueryOptions {
    (self
      .voicevox_make_default_audio_query_options
      .as_ref()
      .expect("Expected function, got error."))()
  }
  pub unsafe fn voicevox_audio_query(
    &self,
    text: *const ::std::os::raw::c_char,
    speaker_id: u32,
    options: VoicevoxAudioQueryOptions,
    output_audio_query_json: *mut *mut ::std::os::raw::c_char,
  ) -> VoicevoxResultCode {
    (self
      .voicevox_audio_query
      .as_ref()
      .expect("Expected function, got error."))(
      text, speaker_id, options, output_audio_query_json
    )
  }
  pub unsafe fn voicevox_make_default_synthesis_options(&self) -> VoicevoxSynthesisOptions {
    (self
      .voicevox_make_default_synthesis_options
      .as_ref()
      .expect("Expected function, got error."))()
  }
  pub unsafe fn voicevox_synthesis(
    &self,
    audio_query_json: *const ::std::os::raw::c_char,
    speaker_id: u32,
    options: VoicevoxSynthesisOptions,
    output_wav_length: *mut usize,
    output_wav: *mut *mut u8,
  ) -> VoicevoxResultCode {
    (self
      .voicevox_synthesis
      .as_ref()
      .expect("Expected function, got error."))(
      audio_query_json,
      speaker_id,
      options,
      output_wav_length,
      output_wav,
    )
  }
  pub unsafe fn voicevox_make_default_tts_options(&self) -> VoicevoxTtsOptions {
    (self
      .voicevox_make_default_tts_options
      .as_ref()
      .expect("Expected function, got error."))()
  }
  pub unsafe fn voicevox_tts(
    &self,
    text: *const ::std::os::raw::c_char,
    speaker_id: u32,
    options: VoicevoxTtsOptions,
    output_wav_length: *mut usize,
    output_wav: *mut *mut u8,
  ) -> VoicevoxResultCode {
    (self
      .voicevox_tts
      .as_ref()
      .expect("Expected function, got error."))(
      text,
      speaker_id,
      options,
      output_wav_length,
      output_wav,
    )
  }
  pub unsafe fn voicevox_audio_query_json_free(
    &self,
    audio_query_json: *mut ::std::os::raw::c_char,
  ) {
    (self
      .voicevox_audio_query_json_free
      .as_ref()
      .expect("Expected function, got error."))(audio_query_json)
  }
  pub unsafe fn voicevox_wav_free(&self, wav: *mut u8) {
    (self
      .voicevox_wav_free
      .as_ref()
      .expect("Expected function, got error."))(wav)
  }
  pub unsafe fn voicevox_error_result_to_message(
    &self,
    result_code: VoicevoxResultCode,
  ) -> *const ::std::os::raw::c_char {
    (self
      .voicevox_error_result_to_message
      .as_ref()
      .expect("Expected function, got error."))(result_code)
  }
}
